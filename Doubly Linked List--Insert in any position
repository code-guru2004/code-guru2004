// Doubly Linked List--Insert in any position
=================================================================================================================================================================================================
1) Create a Doubly L.L.
2)       addList->next = temp->next;
3)       temp->next->prev = addList;
4)       temp->next = addList;
5)        addList->prev = temp;
==========================================================================================================================================================================================================================
#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* prev;
    Node* next;

    Node(int val)
    {
        this->data = val;
        this->prev = NULL;
        this->next = NULL;
        
    }
};

void insertAtHead(Node* &head , int data)
{
    Node* temp = new Node(data);
    temp->next = head;
    head->prev = temp;
    head = temp;   // update head t o temp
}

void insertAtTail(Node* &tail , int data)
{
    Node* temp = new Node(data);
    tail->next = temp;
    temp->prev = tail;
    tail = temp;   // update head t o temp
}
void insertAtPosition(Node* &head, Node* &tail,int pos,int data)
{
    Node* addList = new Node(data);

    if(pos == 0)
    {
        insertAtHead(head,data);
    }
    if(tail->next == NULL)
    {
        insertAtTail(tail,data);
    }
    
    else{
        Node* temp = head;
        int count =1;
        while(count<pos)
        {
            temp = temp->next;
            count++;
        }
        addList->next = temp->next;
        temp->next->prev = addList;
        temp->next = addList;
        addList->prev = temp;


    }
}


void disply(Node* &head)
{
    Node* temp= head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

int main()
{
    Node* node1 = new Node(10);
    cout<<node1->data<<endl;
    Node* head = node1;
    Node* tail = node1;


    disply(head);
  

    
    insertAtTail(tail,12);
    disply(head);
    insertAtTail(tail,13);
    disply(head);
    insertAtPosition(head,tail,4,14);
    disply(head);


    return 0;
    }
