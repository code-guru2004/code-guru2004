LEETCODE PROBLEMS:
Given an integer array nums of unique elements, return all possible 
subsets (the power set).
 The solution set must not contain duplicate subsets. Return the solution in any order.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
I/P --> [1 2 3]
O/P --> [],[1],[2],[3],[1 2],[1 3],[2 3],[1 2 3]

FORMULA===> 2^n (where "n" is number of elements in set)
=====================================================================================================================================================================================
class Solution {
private:
    void solve(vector<int>nums, vector<int>temp, int index, vector<vector<int>>& ans)
    {
        //base condition
        if( index >= nums.size() )
        {
            ans.push_back(temp);
            return;
        }

        // exclude
        solve(nums, temp, index+1, ans);


        //include
        int element= nums[index];
        temp.push_back(element);
        solve(nums ,temp ,index+1 ,ans);
        return;


    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        // int output = "";
        int index=0;
        vector<vector<int>>ans;
        vector<int>temp;
        solve(nums , temp, index, ans);
        return ans;

        
    }
